;;;; Copyright (c) Frank James 2015 <frank.a.james@gmail.com>
;;;; This code is licensed under the MIT license.

;;; Autogenerated from cerberus/kdc/kdc.x at 2015-6-28 19:37:25 

(in-package #:cerberus-kdc)

(frpc:defxtype* kdc-name () :string)
(frpc:defxtype* spn-key-buf () (:varray* :octet))

(frpc:defxenum spn-key-type 
  (:des-cbc-crc 0) 
  (:des-cbc-md4 1) 
  (:des-cbc-md5 2)
  (:des3-cbc-md5 3) 
  (:des3-cbc-sha1-kd 4)
  (:aes128-cts-hmac-sha1-96 5) 
  (:aes256-cts-hmac-sha1-96 6)
  (:rc4-hmac 7) 
  (:rc4-hmac-exp 8) 
  (:rc4-hmac-old-exp 9))

(frpc:defxtype* %spn-key () 
  (:plist type spn-key-type value spn-key-buf))

(frpc:defxtype spn-key ()
  ((stream)
   (let ((s (frpc:read-xtype '%spn-key stream)))
     (make-encryption-key :type (getf s 'type)
			  :value (getf s 'value))))
  ((stream s)
   (frpc:write-xtype '%spn-key stream
		     (list 'type (encryption-key-type s)
			   'value (encryption-key-value s)))))

(frpc:defxtype* spn-key-list ()
  (:varray spn-key))

(frpc:defxtype* spn ()
  (:plist :name kdc-name :keys spn-key-list))

(frpc:defxtype* spn-list ()
  (:varray spn))

;; ----------------------------------------------------

(defun auth-or-fail ()
  (unless (eq (frpc:opaque-auth-flavour frpc:*rpc-remote-auth*) :auth-gss)
    (error 'frpc:rpc-auth-error)))
  
(frpc:defprogram kdc-prog 901980025)

(frpc:defrpc call-null 0 :void :void 
  (:program kdc-prog 1)
  (:handler #'frpc:default-null-handler))

;; ----------------------------------------------------

(defun handle-find (name)
  (auth-or-fail)
  (find-spn name))

(frpc:defrpc call-find 1 kdc-name spn 
  (:arg-transformer (name) name)
  (:program kdc-prog 1)
  (:handler #'handle-find))

;; ----------------------------------------------------

(defun handle-add (spn)
  (auth-or-fail)
  (kdc-log :info "RPC ~A ADD ~A" (frpc:rpc-auth-principal) (getf spn :name))
  (add-spn* (getf spn :name) (getf spn :keys)))

(frpc:defrpc call-add 2 spn :void 
  (:arg-transformer (spn) spn)
  (:program kdc-prog 1)
  (:handler #'handle-add))

;; ----------------------------------------------------

(defun handle-remove (name)  
  (auth-or-fail)
  (kdc-log :info "RPC ~A REMOVE ~A" (frpc:rpc-auth-principal) name)
  (remove-spn name))

(frpc:defrpc call-remove 3 kdc-name :void 
  (:arg-transformer (name) name)
  (:program kdc-prog 1)
  (:handler #'handle-remove))

